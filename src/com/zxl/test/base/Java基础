面向对象三大核心特性
1.继承：
    面向对象的基石，允许创建分层等级。
    继承就是子类继承父类的特征和行为，使得子类拥有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类的相同行为。
    java中的继承只能单继承，但是可以通过内部类继承其它类来实现多继承。

2.多态：
    多态就是同一个行为具有不同的表现形式和形态的能力。
    多态就是同一个接口，使用不同的实例而执行不同的操作。
    多态性是对象多种表现形式的体现。
    同一个事件发生在不同的对象上会产生不同的结果。

3.封装（Encapsulation）：
    封装是将抽象性函数接口的实现部分细节包装、隐藏起来的方法。
    封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。
    要访问改类的代码和数据，必须通过严格的接口控制。
    封装最主要的功能在于我们修改自己的实现代码，而不同修改那些调用我们代码的程序片段。
    适当的封装能够让程序更容易理解和维护，也加强了程序的安全性。

面向对象三大特性详解
一、继承
    1.继承的概念：
        。。。。。

    2.继承的好处：
        子类拥有父类的所有属性和方法（除了private修饰的属性不能拥有），从而实现了代码的复用。

    3.语法规则：
        class 子类 extends 父类.
        A、方法的重写
            子类如果对继承的父类方法不满意（不适合），可以自己编写继承的方法，这种方式成为“方法重写”。当调用方法是会优先调用子类的方法。

            重写注意事项：
                返回值相同
                方法名相同
                参数个数和类型相同

            重载和重写的区别：
                方法重载：在同一个类中处理不同数据的多个相同方法名的多态手段。
                方法重写：相对继承而言，子类中对父类已经存在的方法进行区别化的修改。

        B、继承的初始化顺序
            1、初始化父类再初始化子类
            2、先初始化对象中的属性，再执行构造方法中的初始化。

            基于上面两点，我们就知道实例化一个子类，java程序执行的顺序是：
            父类对象属性初始化 ---> 父类对象构造方法 ---> 子类对象属性初始化 ---> 子类对象构造方法

        C、final关键字
            使用 “final” 关键字做标识有 “最终的” 含义

            1.final 修饰类，则该类 不允许继承。
            2.final 修饰方法，则该方法 不允许被（覆盖）重写。
            3.final 修饰属性，则该该类的该属性不会进行隐式的初始化，所以该final属性的初始化属性必须有值，
                或在构造方法中赋值（但只能选其一，必须选其一，因为没有默认值），且构造方法初始化之后就不能再修改了，只能复制一次。
            4.final 修饰变量，则改变量的值只能复制一次，在声明变量的时候才能赋值，既变为 常量。

        D、super 关键字
            在对象的内部使用，可以代表父类对象。
                1.访问父类的属性 super.age
                2.访问父类的方法 super.eat()

            super 的应用
                首先我们知道子类的构造过程当中必须调用父类的构造方法。其实这个过程已经隐式的使用了 super 关键字。
                这是因为如果子类的构造方法没有显示调用父类的构造方法，则系统会默认调用父类无参构造方法。
                如果自己用super关键字在子类里调用父类的构造方法，则必须在子类方法中的第一行。
                要注意的是：如果子类方法中既没有显示的调用父类的构造方法，而父类(前提是父类有有参的构造函数)没有无参的构造方法，则编译器出错。

    二、封装
        1、



